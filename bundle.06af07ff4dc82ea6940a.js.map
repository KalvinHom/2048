{"version":3,"sources":["webpack:///./src/board.js","webpack:///./src/script.js","webpack:///./src/game.js","webpack:///./src/canvas.js"],"names":["game","constructor","this","setDefaults","board","Array","fill","map","actions","x","action","numTranslate","ready","score","beginTurn","newPiece","y","Math","floor","random","rand","console","log","moveLeft","validMove","nextVal","getNextValue","translate","moveRight","WIDTH","moveUp","getNextYValue","moveDown","HEIGHT","dir","style","draw","actionOccurred","document","getElementsByClassName","transform","transitioning","base","$","each","addEventListener","handler","e","currentTarget","removeEventListener","type","completeTransitions","drawBoard","color","log2","content","innerHTML","getElementById","canvas","isReady","startGame","lastRenderTime","Date","now","fired","window","event","preventDefault","key"],"mappings":"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","file":"bundle.06af07ff4dc82ea6940a.js","sourcesContent":["const WIDTH = 4;\nconst HEIGHT = 4;\nconst CELL_SIZE = 100;\n\nconst NEW_TILE = -1;\nconst MOVE = 1;\nconst MERGE = 2;\nclass Board {\n  constructor() {\n    this.board = Array(HEIGHT)\n      .fill()\n      .map(() => Array(WIDTH).fill(0));\n\n    this.actions = Array(HEIGHT)\n      .fill()\n      .map(() =>\n        Array(WIDTH)\n          .fill()\n          .map((x) => ({ action: 0 }))\n      );\n\n    this.numTranslate = 0;\n    this.ready = true;\n    this.score = 0;\n  }\n  beginTurn() {\n    this.ready = false;\n  }\n\n  newPiece() {\n    let x, y;\n    do {\n      x = Math.floor(Math.random() * WIDTH);\n      y = Math.floor(Math.random() * HEIGHT);\n    } while (this.board[y][x] != 0);\n\n    const rand = Math.floor(Math.random() * 10);\n    this.board[y][x] = rand == 0 ? 4 : 2;\n    this.actions[y][x].action = NEW_TILE;\n    console.log(`new piece at ${x}, ${y}`);\n  }\n\n  //TODO: combine left/right/up/down when not being lazy with copy paste\n  moveLeft() {\n    let validMove = false;\n    for (let y = 0; y < HEIGHT; y++) {\n      for (let x = 0; x < WIDTH; x++) {\n        const nextVal = this.getNextValue(x + 1, y, 1);\n\n        if (nextVal == -1) break;\n\n        if (this.board[y][x] == 0) {\n          validMove = true;\n          this.board[y][x] = this.board[y][nextVal];\n          this.board[y][nextVal] = 0;\n          this.actions[y][nextVal].action = MOVE;\n          this.actions[y][nextVal].translate = [x - nextVal, 0];\n          x--;\n        } else if (this.board[y][x] == this.board[y][nextVal]) {\n          validMove = true;\n\n          this.board[y][x] *= 2;\n          this.board[y][nextVal] = 0;\n          this.actions[y][nextVal].action = MERGE;\n          this.actions[y][nextVal].translate = [x - nextVal, 0];\n          this.score += this.board[y][x];\n        }\n      }\n    }\n    return validMove;\n  }\n\n  moveRight() {\n    let validMove = false;\n\n    for (let y = 0; y < HEIGHT; y++) {\n      for (let x = WIDTH - 1; x >= 0; x--) {\n        const nextVal = this.getNextValue(x - 1, y, -1);\n\n        if (nextVal == -1) break;\n\n        if (this.board[y][x] == 0) {\n          validMove = true;\n          this.board[y][x] = this.board[y][nextVal];\n          this.board[y][nextVal] = 0;\n          this.actions[y][nextVal].action = MOVE;\n          this.actions[y][nextVal].translate = [x - nextVal, 0];\n\n          x++;\n        } else if (this.board[y][x] == this.board[y][nextVal]) {\n          validMove = true;\n\n          this.board[y][x] *= 2;\n          this.board[y][nextVal] = 0;\n          this.actions[y][nextVal].action = MERGE;\n          this.actions[y][nextVal].translate = [x - nextVal, 0];\n          this.score += this.board[y][x];\n        }\n      }\n    }\n    return validMove;\n  }\n\n  moveUp() {\n    let validMove = false;\n    for (let x = 0; x < WIDTH; x++) {\n      for (let y = 0; y < HEIGHT; y++) {\n        const nextVal = this.getNextYValue(x, y + 1, 1);\n\n        if (nextVal == -1) break;\n\n        if (this.board[y][x] == 0) {\n          validMove = true;\n          this.board[y][x] = this.board[nextVal][x];\n          this.board[nextVal][x] = 0;\n          this.actions[nextVal][x].action = MOVE;\n          this.actions[nextVal][x].translate = [0, y - nextVal];\n          y--;\n        } else if (this.board[y][x] == this.board[nextVal][x]) {\n          validMove = true;\n\n          this.board[y][x] *= 2;\n          this.board[nextVal][x] = 0;\n          this.actions[nextVal][x].action = MERGE;\n          this.actions[nextVal][x].translate = [0, y - nextVal];\n          this.score += this.board[y][x];\n        }\n      }\n    }\n    return validMove;\n  }\n\n  moveDown() {\n    let validMove = false;\n\n    for (let x = 0; x < WIDTH; x++) {\n      for (let y = HEIGHT - 1; y >= 0; y--) {\n        const nextVal = this.getNextYValue(x, y - 1, -1);\n\n        if (nextVal == -1) break;\n\n        if (this.board[y][x] == 0) {\n          validMove = true;\n          this.board[y][x] = this.board[nextVal][x];\n          this.board[nextVal][x] = 0;\n          this.actions[nextVal][x].action = MOVE;\n          this.actions[nextVal][x].translate = [0, y - nextVal];\n          y++;\n        } else if (this.board[y][x] == this.board[nextVal][x]) {\n          validMove = true;\n\n          this.board[y][x] *= 2;\n          this.board[nextVal][x] = 0;\n          this.actions[nextVal][x].action = MERGE;\n          this.actions[nextVal][x].translate = [0, y - nextVal];\n          this.score += this.board[y][x];\n        }\n      }\n    }\n    return validMove;\n  }\n\n  getNextValue(x, y, dir) {\n    while (x >= 0 && x < WIDTH) {\n      if (this.board[y][x] != 0) {\n        // const val = this.board[y][x];\n        // this.board[y][x] = 0;\n        return x;\n      }\n      x += dir;\n    }\n    return -1;\n  }\n\n  getNextYValue(x, y, dir) {\n    while (y >= 0 && y < HEIGHT) {\n      if (this.board[y][x] != 0) {\n        // const val = this.board[y][x];\n        // this.board[y][x] = 0;\n        return y;\n      }\n      y += dir;\n    }\n    return -1;\n  }\n\n  style(y, x) {\n    if (this.actions[y][x].action == NEW_TILE) return \"new-tile\";\n\n    return \"normal\";\n  }\n  draw() {\n    console.log(\"beginning board draw\");\n    console.log(this.actions);\n    var actionOccurred = false;\n    for (let y = 0; y < HEIGHT; y++) {\n      for (let x = 0; x < WIDTH; x++) {\n        var content =\n          this.board[y][x] == 0\n            ? \"\"\n            : `<div class=\"tile ${this.style(y, x)}\">${this.board[y][x]}</div>`;\n\n        if (\n          this.actions[y][x].action != 0 &&\n          this.actions[y][x].action != NEW_TILE\n        ) {\n          actionOccurred = true;\n          document\n            .getElementsByClassName(\"grid-row\")\n            [y].getElementsByClassName(\"grid-cell\")\n            [x].getElementsByClassName(\n              \"tile\"\n            )[0].style.transform = `translate(${\n            this.actions[y][x].translate[0] * 106.25 +\n            15 * this.actions[y][x].translate[0]\n          }px, ${\n            this.actions[y][x].translate[1] * 106.25 +\n            15 * this.actions[y][x].translate[1]\n          }px)`;\n          this.numTranslate++;\n          this.transitioning = true;\n          console.log(`added numTranslate:${this.numTranslate}`);\n          var base = this;\n          $(\".tile\").each(function () {\n            this.addEventListener(\"transitionend\", function handler(e) {\n              console.log(e.currentTarget);\n              e.currentTarget.removeEventListener(e.type, handler);\n              base.completeTransitions();\n            });\n          });\n        }\n      }\n    }\n    if (!actionOccurred) {\n      this.drawBoard();\n      this.ready = true;\n    }\n  }\n\n  drawBoard() {\n    for (let y = 0; y < HEIGHT; y++) {\n      for (let x = 0; x < WIDTH; x++) {\n        var color =\n          this.board[y][x] == 0 ? \"\" : 255 - Math.log2(this.board[y][x]) * 10;\n        var content =\n          this.board[y][x] == 0\n            ? \"\"\n            : `<div class=\"tile ${this.style(\n                y,\n                x\n              )}\" style=\"background: rgb(255, ${color}, ${color})\n            \">${this.board[y][x]}</div>`;\n\n        document\n          .getElementsByClassName(\"grid-row\")\n          [y].getElementsByClassName(\"grid-cell\")[x].innerHTML = content;\n        this.actions[y][x].action = 0;\n        document.getElementById(\"score-counter\").innerHTML = this.score;\n      }\n    }\n  }\n\n  completeTransitions() {\n    if (this.transitioning) {\n      console.log(`complete transition`);\n      this.drawBoard();\n      this.ready = true;\n      this.transitioning = false;\n    }\n  }\n}\n\nexport default Board;\n","import Canvas from \"./canvas\";\nimport Board from \"./board\";\nimport \"./style.css\";\nimport Game from \"./game\";\n\nconst game = new Game();\n\ngame.startGame();\n// window.requestAnimationFrame(board.draw.bind(board));\n// board.newPiece();\n// board.newPiece();\n// window.requestAnimationFrame(board.draw.bind(board));\n\nlet fired = false;\nwindow.addEventListener(\"keydown\", function (event) {\n  event.preventDefault();\n  if (fired) return;\n\n  if (!game.isReady()) return;\n\n  fired = true;\n  event.key;\n  event.preventDefault();\n  switch (event.key) {\n    case \"ArrowLeft\":\n    case \"a\":\n      game.moveLeft();\n      break;\n    case \"ArrowRight\":\n    case \"d\":\n      game.moveRight();\n      break;\n\n    case \"ArrowUp\":\n    case \"w\":\n      game.moveUp();\n      break;\n    case \"ArrowDown\":\n    case \"s\":\n      game.moveDown();\n      break;\n\n    default:\n      fired = false;\n\n      return;\n  }\n  fired = false;\n});\n\n// window.addEventListener(\"keyup\", function (event) {\n//   switch (event.key) {\n//     case \"ArrowDown\":\n//     case \"s\":\n//       game.speedOff();\n//       break;\n//     default:\n//       return;\n//   }\n// });\n","import Board from \"./board\";\nimport Canvas from \"./canvas\";\n\nconst ALIVE = 0;\nconst GAMEOVER = 1;\n\nclass Game {\n  constructor() {\n    this.setDefaults();\n  }\n\n  setDefaults() {\n    this.board = new Board();\n    this.canvas = new Canvas();\n  }\n\n  isReady() {\n    return this.board.ready;\n  }\n  startGame() {\n    this.lastRenderTime = Date.now();\n    this.board.newPiece();\n    this.board.newPiece();\n    // this.board.draw();\n    this.board.drawBoard();\n  }\n\n  moveLeft() {\n    this.board.beginTurn();\n    if (this.board.moveLeft()) this.board.newPiece();\n    this.board.draw();\n  }\n\n  moveRight() {\n    this.board.beginTurn();\n    if (this.board.moveRight()) this.board.newPiece();\n    this.board.draw();\n  }\n\n  moveUp() {\n    this.board.beginTurn();\n    if (this.board.moveUp()) this.board.newPiece();\n    this.board.draw();\n  }\n\n  moveDown() {\n    this.board.beginTurn();\n    if (this.board.moveDown()) this.board.newPiece();\n    this.board.draw();\n  }\n}\n\nexport default Game;\n","import Board from \"./board\";\nimport { HIDDEN_ROWS } from \"./constants\";\n\n// this class focuses on how to draw elements\nclass Canvas {\n  constructor(board) {\n    // this.boardPosX = 28;\n    // this.boardPosY = 28;\n    // this.cellSize = 28;\n    // this.levelPosX = 450;\n    // this.levelPosY = 375;\n    // this.scorePosX = 450;\n    // this.scorePosY = 428;\n    // this.previewX = 400;\n    // this.previewY = 120;\n    // this.board = board;\n    // this.boarderColor = \"#fff\";\n    // this.borderThickness = 0.5;\n    // this.canvas = document.querySelector(\"canvas.tetris\");\n    // this.canvas.width = window.innerWidth;\n    // this.canvas.height = window.innerHeight;\n    // this.context = this.canvas.getContext(\"2d\");\n  }\n\n  // drawBorders() {\n  //   const boardBorder = [\n  //     this.boardPosX - this.borderThickness,\n  //     this.boardPosY + HIDDEN_ROWS * this.cellSize - this.borderThickness,\n  //     this.borderThickness + this.boardPosX + this.board.width * this.cellSize,\n  //     this.borderThickness + this.boardPosY + this.board.height * this.cellSize,\n  //   ];\n  //   this.context.beginPath();\n  //   this.context.lineWidth = 1;\n  //   this.context.moveTo(boardBorder[0], boardBorder[1]);\n  //   this.context.lineTo(boardBorder[2], boardBorder[1]);\n  //   this.context.lineTo(boardBorder[2], boardBorder[3]);\n  //   this.context.lineTo(boardBorder[0], boardBorder[3]);\n  //   this.context.closePath();\n  //   this.context.strokeStyle = this.borderColor;\n\n  //   this.context.stroke();\n  // }\n\n  // drawGrid() {\n  //   // horizontal lines\n  //   this.context.strokeStyle = this.borderColor;\n  //   this.context.lineWidth = 0.5;\n\n  //   const boardRight = this.boardPosX + this.cellSize * this.board.width;\n  //   for (let i = 3; i < this.board.height; i++) {\n  //     const height = this.boardPosY + i * this.cellSize;\n  //     this.context.beginPath();\n  //     this.context.moveTo(this.boardPosX, height);\n  //     this.context.lineTo(boardRight, height);\n  //     this.context.closePath();\n  //     this.context.stroke();\n  //   }\n\n  //   // vertical lines\n  //   this.context.strokeStyle = this.borderColor;\n  //   const boardBottom = this.boardPosY + this.cellSize * this.board.height;\n  //   for (let i = 1; i < this.board.width; i++) {\n  //     const height = this.boardPosX + i * this.cellSize;\n  //     this.context.beginPath();\n  //     this.context.moveTo(height, this.boardPosY + HIDDEN_ROWS * this.cellSize);\n  //     this.context.lineTo(height, boardBottom);\n  //     this.context.closePath();\n  //     this.context.stroke();\n  //   }\n  // }\n  // drawBoard() {\n  //   this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n  //   this.drawBorders();\n  //   this.drawGrid();\n  //   for (let i = HIDDEN_ROWS; i < this.board.height; i++) {\n  //     for (let j = 0; j < this.board.width; j++) {\n  //       if (this.board.board[i][j] != null) {\n  //         this.drawSquare(\n  //           this.boardPosX + j * this.cellSize,\n  //           this.boardPosY + i * this.cellSize,\n  //           this.board.board[i][j]\n  //         );\n  //       }\n  //     }\n  //   }\n  // }\n\n  // drawLevel(level) {\n  //   this.context.font = \"40px serif\";\n  //   this.context.fillStyle = \"#000000\";\n  //   this.context.fillText(`Level: ${level}`, this.levelPosX, this.levelPosY);\n  // }\n\n  // drawScore(score) {\n  //   this.context.font = \"40px serif\";\n  //   this.context.fillStyle = \"#000000\";\n  //   this.context.fillText(`Score: ${score}`, this.scorePosX, this.scorePosY);\n  // }\n\n  // drawPiecePreview(piece) {\n  //   const scoreBorder = [\n  //     this.previewX - this.borderThickness,\n  //     this.previewY - this.borderThickness,\n  //     this.borderThickness + this.previewX + 200,\n  //     this.borderThickness + this.previewY + 150,\n  //   ];\n\n  //   this.context.beginPath();\n  //   this.context.lineWidth = 1;\n  //   this.context.moveTo(scoreBorder[0], scoreBorder[1]);\n  //   this.context.lineTo(scoreBorder[2], scoreBorder[1]);\n  //   this.context.lineTo(scoreBorder[2], scoreBorder[3]);\n  //   this.context.lineTo(scoreBorder[0], scoreBorder[3]);\n  //   this.context.closePath();\n  //   this.context.strokeStyle = \"black\";\n  //   this.context.stroke();\n  //   const shape = piece.getShape();\n  //   for (let i = 0; i < shape.length; ++i) {\n  //     for (let j = 0; j < shape[i].length; ++j) {\n  //       if (shape[i][j] != 0) {\n  //         this.drawSquare(\n  //           this.previewX + 30 + j * this.cellSize,\n  //           this.previewY + 35 + i * this.cellSize,\n  //           piece.color\n  //         );\n  //       }\n  //     }\n  //   }\n  // }\n\n  // drawPiece(piece, posX, posY) {\n  //   const shape = piece.getShape();\n  //   for (let i = 0; i < shape.length; ++i) {\n  //     for (let j = 0; j < shape[i].length; ++j) {\n  //       if (shape[i][j] != 0) {\n  //         if (posY + i >= HIDDEN_ROWS) {\n  //           this.drawSquare(\n  //             this.boardPosX + (posX + j) * this.cellSize,\n  //             this.boardPosY + (posY + i) * this.cellSize,\n  //             piece.color\n  //           );\n  //         }\n  //       }\n  //     }\n  //   }\n  // }\n\n  // drawSquare(x, y, color) {\n  //   this.context.beginPath();\n\n  //   this.context.fillStyle = color;\n  //   this.context.fillRect(\n  //     x + 0.5,\n  //     y + 0.5,\n  //     this.cellSize - 1,\n  //     this.cellSize - 1\n  //   );\n  // }\n\n  // drawRestart() {\n  //   this.context.beginPath();\n  //   this.context.rect(500, 500, 250, 100);\n  //   this.context.fillStyle = \"#000000\";\n  //   this.context.fillStyle = \"rgba(225,225,225,0.5)\";\n  //   // this.context.fillRect(25, 72, 32, 32);\n  //   this.context.fill();\n  //   this.context.lineWidth = 2;\n  //   this.context.strokeStyle = \"#000000\";\n  //   this.context.stroke();\n  //   this.context.closePath();\n  //   this.context.font = \"40pt Serif\";\n  //   this.context.fillStyle = \"#000000\";\n  //   this.context.fillText(\"Restart\", 550, 570);\n  // }\n\n  // drawControls() {\n  //   this.context.font = \"20px serif\";\n  //   this.context.fillStyle = \"#000000\";\n  //   this.context.fillText(\"Controls:\", 550, 700);\n  //   this.context.fillText(\"Q/E - rotate\", 550, 720);\n  //   this.context.fillText(\"W/D or left/right arrows - left/right\", 550, 740);\n  //   this.context.fillText(\"S or down arrow - speed down\", 550, 760);\n  // }\n}\n\nexport default Canvas;\n"],"sourceRoot":""}