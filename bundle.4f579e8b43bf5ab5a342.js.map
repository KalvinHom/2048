{"version":3,"sources":["webpack:///./src/board.js","webpack:///./src/script.js","webpack:///./src/game.js","webpack:///./src/canvas.js"],"names":["game","constructor","this","setDefaults","board","Array","fill","map","actions","x","action","canvas","document","querySelector","width","window","innerWidth","height","innerHeight","context","getContext","ready","beginTurn","newPiece","y","Math","floor","random","rand","console","log","moveLeft","validMove","nextVal","getNextValue","translate","moveRight","WIDTH","moveUp","getNextYValue","moveDown","HEIGHT","dir","style","draw","clearRect","getElementsByClassName","transform","base","setTimeout","color","log2","content","innerHTML","isReady","startGame","lastRenderTime","Date","now","render","fired","addEventListener","event","preventDefault","key"],"mappings":"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","file":"bundle.4f579e8b43bf5ab5a342.js","sourcesContent":["const WIDTH = 4;\r\nconst HEIGHT = 4;\r\nconst CELL_SIZE = 100;\r\n\r\nconst NEW_TILE = -1;\r\nconst MOVE = 1;\r\nconst MERGE = 2;\r\nclass Board {\r\n  constructor() {\r\n    this.board = Array(HEIGHT)\r\n      .fill()\r\n      .map(() => Array(WIDTH).fill(0));\r\n\r\n    this.actions = Array(HEIGHT)\r\n      .fill()\r\n      .map(() =>\r\n        Array(WIDTH)\r\n          .fill()\r\n          .map((x) => ({ action: 0 }))\r\n      );\r\n\r\n    this.canvas = document.querySelector(\"canvas.board\");\r\n    this.canvas.width = window.innerWidth;\r\n    this.canvas.height = window.innerHeight;\r\n    this.context = this.canvas.getContext(\"2d\");\r\n    this.ready = true;\r\n  }\r\n  beginTurn() {\r\n    this.ready = false;\r\n  }\r\n\r\n  newPiece() {\r\n    let x, y;\r\n    do {\r\n      x = Math.floor(Math.random() * WIDTH);\r\n      y = Math.floor(Math.random() * HEIGHT);\r\n    } while (this.board[y][x] != 0);\r\n\r\n    const rand = Math.floor(Math.random() * 10);\r\n    this.board[y][x] = rand == 0 ? 4 : 2;\r\n    this.actions[y][x].action = NEW_TILE;\r\n    console.log(`new piece at ${x}, ${y}`);\r\n  }\r\n\r\n  //TODO: combine left/right/up/down when not being lazy with copy paste\r\n  moveLeft() {\r\n    let validMove = false;\r\n    for (let y = 0; y < HEIGHT; y++) {\r\n      for (let x = 0; x < WIDTH; x++) {\r\n        const nextVal = this.getNextValue(x + 1, y, 1);\r\n\r\n        if (nextVal == -1) break;\r\n\r\n        if (this.board[y][x] == 0) {\r\n          validMove = true;\r\n          this.board[y][x] = this.board[y][nextVal];\r\n          this.board[y][nextVal] = 0;\r\n          this.actions[y][nextVal].action = MOVE;\r\n          this.actions[y][nextVal].translate = [x - nextVal, 0];\r\n          x--;\r\n        } else if (this.board[y][x] == this.board[y][nextVal]) {\r\n          validMove = true;\r\n\r\n          this.board[y][x] *= 2;\r\n          this.board[y][nextVal] = 0;\r\n          this.actions[y][nextVal].action = MERGE;\r\n          this.actions[y][nextVal].translate = [x - nextVal, 0];\r\n        }\r\n      }\r\n    }\r\n    return validMove;\r\n  }\r\n\r\n  moveRight() {\r\n    let validMove = false;\r\n\r\n    for (let y = 0; y < HEIGHT; y++) {\r\n      for (let x = WIDTH - 1; x >= 0; x--) {\r\n        const nextVal = this.getNextValue(x - 1, y, -1);\r\n\r\n        if (nextVal == -1) break;\r\n\r\n        if (this.board[y][x] == 0) {\r\n          validMove = true;\r\n          this.board[y][x] = this.board[y][nextVal];\r\n          this.board[y][nextVal] = 0;\r\n          this.actions[y][nextVal].action = MOVE;\r\n          this.actions[y][nextVal].translate = [x - nextVal, 0];\r\n\r\n          x++;\r\n        } else if (this.board[y][x] == this.board[y][nextVal]) {\r\n          validMove = true;\r\n\r\n          this.board[y][x] *= 2;\r\n          this.board[y][nextVal] = 0;\r\n          this.actions[y][nextVal].action = MERGE;\r\n          this.actions[y][nextVal].translate = [x - nextVal, 0];\r\n        }\r\n      }\r\n    }\r\n    return validMove;\r\n  }\r\n\r\n  moveUp() {\r\n    let validMove = false;\r\n    for (let x = 0; x < WIDTH; x++) {\r\n      for (let y = 0; y < HEIGHT; y++) {\r\n        const nextVal = this.getNextYValue(x, y + 1, 1);\r\n\r\n        if (nextVal == -1) break;\r\n\r\n        if (this.board[y][x] == 0) {\r\n          validMove = true;\r\n          this.board[y][x] = this.board[nextVal][x];\r\n          this.board[nextVal][x] = 0;\r\n          this.actions[nextVal][x].action = MOVE;\r\n          this.actions[nextVal][x].translate = [0, y - nextVal];\r\n          y--;\r\n        } else if (this.board[y][x] == this.board[nextVal][x]) {\r\n          validMove = true;\r\n\r\n          this.board[y][x] *= 2;\r\n          this.board[nextVal][x] = 0;\r\n          this.actions[nextVal][x].action = MERGE;\r\n          this.actions[nextVal][x].translate = [0, y - nextVal];\r\n        }\r\n      }\r\n    }\r\n    return validMove;\r\n  }\r\n\r\n  moveDown() {\r\n    let validMove = false;\r\n\r\n    for (let x = 0; x < WIDTH; x++) {\r\n      for (let y = HEIGHT - 1; y >= 0; y--) {\r\n        const nextVal = this.getNextYValue(x, y - 1, -1);\r\n\r\n        if (nextVal == -1) break;\r\n\r\n        if (this.board[y][x] == 0) {\r\n          validMove = true;\r\n          this.board[y][x] = this.board[nextVal][x];\r\n          this.board[nextVal][x] = 0;\r\n          this.actions[nextVal][x].action = MOVE;\r\n          this.actions[nextVal][x].translate = [0, y - nextVal];\r\n          y++;\r\n        } else if (this.board[y][x] == this.board[nextVal][x]) {\r\n          validMove = true;\r\n\r\n          this.board[y][x] *= 2;\r\n          this.board[nextVal][x] = 0;\r\n          this.actions[nextVal][x].action = MERGE;\r\n          this.actions[nextVal][x].translate = [0, y - nextVal];\r\n        }\r\n      }\r\n    }\r\n    return validMove;\r\n  }\r\n\r\n  getNextValue(x, y, dir) {\r\n    while (x >= 0 && x < WIDTH) {\r\n      if (this.board[y][x] != 0) {\r\n        // const val = this.board[y][x];\r\n        // this.board[y][x] = 0;\r\n        return x;\r\n      }\r\n      x += dir;\r\n    }\r\n    return -1;\r\n  }\r\n\r\n  getNextYValue(x, y, dir) {\r\n    while (y >= 0 && y < HEIGHT) {\r\n      if (this.board[y][x] != 0) {\r\n        // const val = this.board[y][x];\r\n        // this.board[y][x] = 0;\r\n        return y;\r\n      }\r\n      y += dir;\r\n    }\r\n    return -1;\r\n  }\r\n\r\n  style(y, x) {\r\n    if (this.actions[y][x] == NEW_TILE) return \"new-tile\";\r\n\r\n    return \"normal\";\r\n  }\r\n  draw() {\r\n    this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n    console.log(\"beginning board draw\");\r\n    for (let y = 0; y < HEIGHT; y++) {\r\n      for (let x = 0; x < WIDTH; x++) {\r\n        var content =\r\n          this.board[y][x] == 0\r\n            ? \"\"\r\n            : `<div class=\"tile ${this.style(y, x)}\">${this.board[y][x]}</div>`;\r\n\r\n        if (\r\n          this.actions[y][x].action != 0 &&\r\n          this.actions[y][x].action != NEW_TILE\r\n        ) {\r\n          document\r\n            .getElementsByClassName(\"grid-row\")\r\n            [y].getElementsByClassName(\"grid-cell\")\r\n            [x].getElementsByClassName(\r\n              \"tile\"\r\n            )[0].style.transform = `translate(${\r\n            this.actions[y][x].translate[0] * 106.25 +\r\n            15 * this.actions[y][x].translate[0]\r\n          }px, ${\r\n            this.actions[y][x].translate[1] * 106.25 +\r\n            15 * this.actions[y][x].translate[1]\r\n          }px)`;\r\n        }\r\n      }\r\n    }\r\n    var base = this;\r\n\r\n    setTimeout(function () {\r\n      for (let y = 0; y < HEIGHT; y++) {\r\n        for (let x = 0; x < WIDTH; x++) {\r\n          var color =\r\n            base.board[y][x] == 0 ? \"\" : 255 - Math.log2(base.board[y][x]) * 10;\r\n          var content =\r\n            base.board[y][x] == 0\r\n              ? \"\"\r\n              : `<div class=\"tile ${base.style(\r\n                  y,\r\n                  x\r\n                )}\" style=\"background: rgb(255, ${color}, ${color})\r\n              \">${base.board[y][x]}</div>`;\r\n\r\n          document\r\n            .getElementsByClassName(\"grid-row\")\r\n            [y].getElementsByClassName(\"grid-cell\")[x].innerHTML = content;\r\n          base.actions[y][x].action = 0;\r\n        }\r\n      }\r\n\r\n      base.ready = true;\r\n    }, 300);\r\n  }\r\n}\r\n\r\nexport default Board;\r\n","import Canvas from \"./canvas\";\r\nimport Board from \"./board\";\r\nimport \"./style.css\";\r\nimport Game from \"./game\";\r\n\r\nconst game = new Game();\r\n\r\ngame.startGame();\r\n// window.requestAnimationFrame(board.draw.bind(board));\r\n// board.newPiece();\r\n// board.newPiece();\r\n// window.requestAnimationFrame(board.draw.bind(board));\r\n\r\nlet fired = false;\r\nwindow.addEventListener(\"keydown\", function (event) {\r\n  event.preventDefault();\r\n  if (fired) return;\r\n\r\n  if (!game.isReady()) return;\r\n\r\n  fired = true;\r\n  event.key;\r\n  event.preventDefault();\r\n  switch (event.key) {\r\n    case \"ArrowLeft\":\r\n    case \"a\":\r\n      game.moveLeft();\r\n      break;\r\n    case \"ArrowRight\":\r\n    case \"d\":\r\n      game.moveRight();\r\n      break;\r\n\r\n    case \"ArrowUp\":\r\n    case \"w\":\r\n      game.moveUp();\r\n      break;\r\n    case \"ArrowDown\":\r\n    case \"s\":\r\n      game.moveDown();\r\n      break;\r\n\r\n    default:\r\n      fired = false;\r\n\r\n      return;\r\n  }\r\n  fired = false;\r\n});\r\n\r\n// window.addEventListener(\"keyup\", function (event) {\r\n//   switch (event.key) {\r\n//     case \"ArrowDown\":\r\n//     case \"s\":\r\n//       game.speedOff();\r\n//       break;\r\n//     default:\r\n//       return;\r\n//   }\r\n// });\r\n","import Board from \"./board\";\r\nimport Canvas from \"./canvas\";\r\n\r\nconst ALIVE = 0;\r\nconst GAMEOVER = 1;\r\n\r\nclass Game {\r\n  constructor() {\r\n    this.setDefaults();\r\n  }\r\n\r\n  setDefaults() {\r\n    this.board = new Board();\r\n    this.canvas = new Canvas();\r\n  }\r\n\r\n  isReady() {\r\n    return this.board.ready;\r\n  }\r\n  startGame() {\r\n    this.lastRenderTime = Date.now();\r\n    this.board.newPiece();\r\n    this.board.newPiece();\r\n    this.board.draw();\r\n  }\r\n\r\n  moveLeft() {\r\n    this.board.beginTurn();\r\n    if (this.board.moveLeft()) this.board.newPiece();\r\n    this.board.draw();\r\n  }\r\n\r\n  moveRight() {\r\n    this.board.beginTurn();\r\n    if (this.board.moveRight()) this.board.newPiece();\r\n    this.board.draw();\r\n  }\r\n\r\n  moveUp() {\r\n    this.board.beginTurn();\r\n    if (this.board.moveUp()) this.board.newPiece();\r\n    this.board.draw();\r\n  }\r\n\r\n  moveDown() {\r\n    this.board.beginTurn();\r\n    if (this.board.moveDown()) this.board.newPiece();\r\n    this.board.draw();\r\n  }\r\n\r\n  // tick() {\r\n  //   const elapsed = Date.now() - this.lastRenderTime;\r\n\r\n  //   if (elapsed > 1000) {\r\n  //     this.render();\r\n  //     this.lastRenderTime = Date.now();\r\n  //   }\r\n  //   window.requestAnimationFrame(this.tick.bind(this));\r\n  // }\r\n\r\n  render() {\r\n    this.board.draw();\r\n  }\r\n}\r\n\r\nexport default Game;\r\n","import Board from \"./board\";\r\nimport { HIDDEN_ROWS } from \"./constants\";\r\n\r\n// this class focuses on how to draw elements\r\nclass Canvas {\r\n  constructor(board) {\r\n    // this.boardPosX = 28;\r\n    // this.boardPosY = 28;\r\n    // this.cellSize = 28;\r\n    // this.levelPosX = 450;\r\n    // this.levelPosY = 375;\r\n    // this.scorePosX = 450;\r\n    // this.scorePosY = 428;\r\n    // this.previewX = 400;\r\n    // this.previewY = 120;\r\n    // this.board = board;\r\n    // this.boarderColor = \"#fff\";\r\n    // this.borderThickness = 0.5;\r\n    // this.canvas = document.querySelector(\"canvas.tetris\");\r\n    // this.canvas.width = window.innerWidth;\r\n    // this.canvas.height = window.innerHeight;\r\n    // this.context = this.canvas.getContext(\"2d\");\r\n  }\r\n\r\n  // drawBorders() {\r\n  //   const boardBorder = [\r\n  //     this.boardPosX - this.borderThickness,\r\n  //     this.boardPosY + HIDDEN_ROWS * this.cellSize - this.borderThickness,\r\n  //     this.borderThickness + this.boardPosX + this.board.width * this.cellSize,\r\n  //     this.borderThickness + this.boardPosY + this.board.height * this.cellSize,\r\n  //   ];\r\n  //   this.context.beginPath();\r\n  //   this.context.lineWidth = 1;\r\n  //   this.context.moveTo(boardBorder[0], boardBorder[1]);\r\n  //   this.context.lineTo(boardBorder[2], boardBorder[1]);\r\n  //   this.context.lineTo(boardBorder[2], boardBorder[3]);\r\n  //   this.context.lineTo(boardBorder[0], boardBorder[3]);\r\n  //   this.context.closePath();\r\n  //   this.context.strokeStyle = this.borderColor;\r\n\r\n  //   this.context.stroke();\r\n  // }\r\n\r\n  // drawGrid() {\r\n  //   // horizontal lines\r\n  //   this.context.strokeStyle = this.borderColor;\r\n  //   this.context.lineWidth = 0.5;\r\n\r\n  //   const boardRight = this.boardPosX + this.cellSize * this.board.width;\r\n  //   for (let i = 3; i < this.board.height; i++) {\r\n  //     const height = this.boardPosY + i * this.cellSize;\r\n  //     this.context.beginPath();\r\n  //     this.context.moveTo(this.boardPosX, height);\r\n  //     this.context.lineTo(boardRight, height);\r\n  //     this.context.closePath();\r\n  //     this.context.stroke();\r\n  //   }\r\n\r\n  //   // vertical lines\r\n  //   this.context.strokeStyle = this.borderColor;\r\n  //   const boardBottom = this.boardPosY + this.cellSize * this.board.height;\r\n  //   for (let i = 1; i < this.board.width; i++) {\r\n  //     const height = this.boardPosX + i * this.cellSize;\r\n  //     this.context.beginPath();\r\n  //     this.context.moveTo(height, this.boardPosY + HIDDEN_ROWS * this.cellSize);\r\n  //     this.context.lineTo(height, boardBottom);\r\n  //     this.context.closePath();\r\n  //     this.context.stroke();\r\n  //   }\r\n  // }\r\n  // drawBoard() {\r\n  //   this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\r\n  //   this.drawBorders();\r\n  //   this.drawGrid();\r\n  //   for (let i = HIDDEN_ROWS; i < this.board.height; i++) {\r\n  //     for (let j = 0; j < this.board.width; j++) {\r\n  //       if (this.board.board[i][j] != null) {\r\n  //         this.drawSquare(\r\n  //           this.boardPosX + j * this.cellSize,\r\n  //           this.boardPosY + i * this.cellSize,\r\n  //           this.board.board[i][j]\r\n  //         );\r\n  //       }\r\n  //     }\r\n  //   }\r\n  // }\r\n\r\n  // drawLevel(level) {\r\n  //   this.context.font = \"40px serif\";\r\n  //   this.context.fillStyle = \"#000000\";\r\n  //   this.context.fillText(`Level: ${level}`, this.levelPosX, this.levelPosY);\r\n  // }\r\n\r\n  // drawScore(score) {\r\n  //   this.context.font = \"40px serif\";\r\n  //   this.context.fillStyle = \"#000000\";\r\n  //   this.context.fillText(`Score: ${score}`, this.scorePosX, this.scorePosY);\r\n  // }\r\n\r\n  // drawPiecePreview(piece) {\r\n  //   const scoreBorder = [\r\n  //     this.previewX - this.borderThickness,\r\n  //     this.previewY - this.borderThickness,\r\n  //     this.borderThickness + this.previewX + 200,\r\n  //     this.borderThickness + this.previewY + 150,\r\n  //   ];\r\n\r\n  //   this.context.beginPath();\r\n  //   this.context.lineWidth = 1;\r\n  //   this.context.moveTo(scoreBorder[0], scoreBorder[1]);\r\n  //   this.context.lineTo(scoreBorder[2], scoreBorder[1]);\r\n  //   this.context.lineTo(scoreBorder[2], scoreBorder[3]);\r\n  //   this.context.lineTo(scoreBorder[0], scoreBorder[3]);\r\n  //   this.context.closePath();\r\n  //   this.context.strokeStyle = \"black\";\r\n  //   this.context.stroke();\r\n  //   const shape = piece.getShape();\r\n  //   for (let i = 0; i < shape.length; ++i) {\r\n  //     for (let j = 0; j < shape[i].length; ++j) {\r\n  //       if (shape[i][j] != 0) {\r\n  //         this.drawSquare(\r\n  //           this.previewX + 30 + j * this.cellSize,\r\n  //           this.previewY + 35 + i * this.cellSize,\r\n  //           piece.color\r\n  //         );\r\n  //       }\r\n  //     }\r\n  //   }\r\n  // }\r\n\r\n  // drawPiece(piece, posX, posY) {\r\n  //   const shape = piece.getShape();\r\n  //   for (let i = 0; i < shape.length; ++i) {\r\n  //     for (let j = 0; j < shape[i].length; ++j) {\r\n  //       if (shape[i][j] != 0) {\r\n  //         if (posY + i >= HIDDEN_ROWS) {\r\n  //           this.drawSquare(\r\n  //             this.boardPosX + (posX + j) * this.cellSize,\r\n  //             this.boardPosY + (posY + i) * this.cellSize,\r\n  //             piece.color\r\n  //           );\r\n  //         }\r\n  //       }\r\n  //     }\r\n  //   }\r\n  // }\r\n\r\n  // drawSquare(x, y, color) {\r\n  //   this.context.beginPath();\r\n\r\n  //   this.context.fillStyle = color;\r\n  //   this.context.fillRect(\r\n  //     x + 0.5,\r\n  //     y + 0.5,\r\n  //     this.cellSize - 1,\r\n  //     this.cellSize - 1\r\n  //   );\r\n  // }\r\n\r\n  // drawRestart() {\r\n  //   this.context.beginPath();\r\n  //   this.context.rect(500, 500, 250, 100);\r\n  //   this.context.fillStyle = \"#000000\";\r\n  //   this.context.fillStyle = \"rgba(225,225,225,0.5)\";\r\n  //   // this.context.fillRect(25, 72, 32, 32);\r\n  //   this.context.fill();\r\n  //   this.context.lineWidth = 2;\r\n  //   this.context.strokeStyle = \"#000000\";\r\n  //   this.context.stroke();\r\n  //   this.context.closePath();\r\n  //   this.context.font = \"40pt Serif\";\r\n  //   this.context.fillStyle = \"#000000\";\r\n  //   this.context.fillText(\"Restart\", 550, 570);\r\n  // }\r\n\r\n  // drawControls() {\r\n  //   this.context.font = \"20px serif\";\r\n  //   this.context.fillStyle = \"#000000\";\r\n  //   this.context.fillText(\"Controls:\", 550, 700);\r\n  //   this.context.fillText(\"Q/E - rotate\", 550, 720);\r\n  //   this.context.fillText(\"W/D or left/right arrows - left/right\", 550, 740);\r\n  //   this.context.fillText(\"S or down arrow - speed down\", 550, 760);\r\n  // }\r\n}\r\n\r\nexport default Canvas;\r\n"],"sourceRoot":""}